diff --git a/pom.xml b/pom.xml
index c32f4a5..46116cc 100644
--- a/pom.xml
+++ b/pom.xml
@@ -177,6 +177,11 @@
 			<artifactId>spring-session-hazelcast</artifactId>
 		</dependency>
 		<!-- used for EhCacheCacheManager -->
+		<dependency>
+			<groupId>org.ehcache</groupId>
+			<artifactId>ehcache</artifactId>
+			<classifier>jakarta</classifier>
+		</dependency>
 		<dependency>
 			<groupId>org.springframework</groupId>
 			<artifactId>spring-context-support</artifactId>
@@ -242,12 +247,6 @@
 			<artifactId>hibernate-validator</artifactId>
 			<version>${hibernate-validator.version}</version>
 		</dependency>
-		<dependency>
-			<groupId>org.hibernate</groupId>
-			<artifactId>hibernate-ehcache</artifactId>
-			<version>${hibernate.version}</version>
-		</dependency>
-
 
 		<!-- Webjars -->
 		<dependency>
@@ -599,4 +598,4 @@
 		</repository>
 	</repositories>
 
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/org/springframework/samples/petclinic/config/ToolsConfig.java b/src/main/java/org/springframework/samples/petclinic/config/ToolsConfig.java
index 642649e..d6c73e0 100644
--- a/src/main/java/org/springframework/samples/petclinic/config/ToolsConfig.java
+++ b/src/main/java/org/springframework/samples/petclinic/config/ToolsConfig.java
@@ -1,81 +1,58 @@
-/*
- * Copyright 2002-2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/*
- * Copyright 2002-2013 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.springframework.samples.petclinic.config;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cache.annotation.EnableCaching;
-import org.springframework.cache.ehcache.EhCacheCacheManager;
-import org.springframework.cache.ehcache.EhCacheManagerFactoryBean;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Description;
-import org.springframework.context.annotation.EnableAspectJAutoProxy;
-import org.springframework.context.annotation.EnableMBeanExport;
-import org.springframework.core.convert.ConversionService;
-import org.springframework.core.convert.support.DefaultConversionService;
-import org.springframework.core.io.ClassPathResource;
-import org.springframework.samples.petclinic.util.CallMonitoringAspect;
-
-import net.sf.ehcache.CacheManager;
-
-@Configuration
-@EnableCaching // enables scanning for @Cacheable annotation
-@EnableMBeanExport
-@EnableAspectJAutoProxy
-public class ToolsConfig {
-
-	@Bean
-	@Description("Conversion Service for list handling on configuration loading")
-	public ConversionService conversionService() {
-		return new DefaultConversionService();
-	}
-
-	@Bean
-	@Description("Call monitoring aspect that monitors call count and call invocation time")
-	public CallMonitoringAspect callMonitor() {
-		return new CallMonitoringAspect();
-	}
-
-	@Bean
-	@Autowired
-	public EhCacheCacheManager ehCacheCacheManager(CacheManager cacheManager) {
-		EhCacheCacheManager ehCacheCacheManager = new EhCacheCacheManager();
-		ehCacheCacheManager.setCacheManager(cacheManager);
-		return ehCacheCacheManager;
-	}
-
-	@Bean
-	public EhCacheManagerFactoryBean cacheManager() {
-		EhCacheManagerFactoryBean ehCacheManager = new EhCacheManagerFactoryBean();
-		ehCacheManager.setConfigLocation(new ClassPathResource("cache/ehcache.xml"));
-		return ehCacheManager;
-	}
-}
+/*
+ * Copyright 2002-2013 the original author or authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.springframework.samples.petclinic.config;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.EnableCaching;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Description;
+import org.springframework.context.annotation.EnableAspectJAutoProxy;
+import org.springframework.context.annotation.EnableMBeanExport;
+import org.springframework.core.convert.ConversionService;
+import org.springframework.core.convert.support.DefaultConversionService;
+import org.springframework.samples.petclinic.util.CallMonitoringAspect;
+
+import javax.cache.Caching;
+import javax.cache.spi.CachingProvider;
+import org.springframework.cache.jcache.JCacheCacheManager;
+
+@Configuration
+@EnableCaching // enables scanning for @Cacheable annotation
+@EnableMBeanExport
+@EnableAspectJAutoProxy
+public class ToolsConfig {
+
+    @Bean
+    @Description("Conversion Service for list handling on configuration loading")
+    public ConversionService conversionService() {
+        return new DefaultConversionService();
+    }
+
+    @Bean
+    @Description("Call monitoring aspect that monitors call count and call invocation time")
+    public CallMonitoringAspect callMonitor() {
+        return new CallMonitoringAspect();
+    }
+
+    @Bean
+    @Autowired
+    public JCacheCacheManager cacheManager() {
+        CachingProvider cachingProvider = Caching.getCachingProvider();
+        javax.cache.CacheManager ehCacheManager = cachingProvider.getCacheManager();
+        return new JCacheCacheManager(ehCacheManager);
+    }
+}
\ No newline at end of file
